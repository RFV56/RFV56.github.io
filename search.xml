<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于WSL2+Clion配置ESPIDF开发环境</title>
    <url>/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文参考了<br><a href="https://blog.csdn.net/Missrainbows/article/details/130847126">WSL2下配置ESP-IDF开发环境</a><br><a href="https://blog.csdn.net/qq_38844263/article/details/123989779">[ESP32][环境配置] Clion配置ESP-IDF开发环境，支持编译下载和menucofig</a></p>
<h2 id="安装WSL2的新方法"><a href="#安装WSL2的新方法" class="headerlink" title="安装WSL2的新方法"></a><strong>安装WSL2<span id="more"></span>的新方法</strong></h2><p>使用管理员权限打开Powershell，这种方法默认安装的是WSL2，并使用Ubuntu发行版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure>
<h2 id="旧方法安装WSL2"><a href="#旧方法安装WSL2" class="headerlink" title="旧方法安装WSL2"></a><strong>旧方法安装WSL2</strong></h2><h3 id="启用WSL"><a href="#启用WSL" class="headerlink" title="启用WSL"></a>启用WSL</h3><p>在控制面板-程序-启用或关闭Windows功能中打开【适用于Linux的Windows子系统】和【虚拟机平台】功能，然后重启电脑。<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Pasted%20image%2020240621163322.png"><br>此时已经打开了WSL，需要更新内核到WSL2</p>
<h3 id="更新WSL到WSL2"><a href="#更新WSL到WSL2" class="headerlink" title="更新WSL到WSL2"></a><strong>更新WSL到WSL2</strong></h3><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">下载Linux内核更新包并安装</a>并运行</p>
<h3 id="将默认WSL2设置为默认版本"><a href="#将默认WSL2设置为默认版本" class="headerlink" title="将默认WSL2设置为默认版本"></a>将默认WSL2设置为默认版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="在Microsoft-Store下载安装Linux发行版"><a href="#在Microsoft-Store下载安装Linux发行版" class="headerlink" title="在Microsoft Store下载安装Linux发行版"></a>在Microsoft Store下载安装Linux发行版</h3><p>比如Ubuntu 22.04 LTS</p>
<p>安装好之后运行发行版，设置账号密码就可以开始使用了，开始安装ESP-IDF前可以先换个源</p>
<h2 id="安装ESP-IDF"><a href="#安装ESP-IDF" class="headerlink" title="安装ESP-IDF"></a><strong>安装ESP-IDF</strong></h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git wget flex bison gperf python3 python3-venv python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0</span><br></pre></td></tr></table></figure>
<h3 id="获取ESP-IDF"><a href="#获取ESP-IDF" class="headerlink" title="获取ESP-IDF"></a>获取ESP-IDF</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/esp</span><br><span class="line">cd ~/esp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需要修改ESP-IDF的版本</span></span><br><span class="line">git clone -b release/v5.0 --recursive https://github.com/espressif/esp-idf.git</span><br></pre></td></tr></table></figure>
<h3 id="设置芯片类型"><a href="#设置芯片类型" class="headerlink" title="设置芯片类型"></a>设置芯片类型</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/esp/esp-idf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置esp32项目开发 根据需要选择比如 ./install.sh esp32s3</span></span><br><span class="line">./install.sh esp32</span><br></pre></td></tr></table></figure>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>每次开发前都需要设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">. $HOME/esp/esp-idf/export.sh</span><br></pre></td></tr></table></figure>
<h3 id="开始开发，以hello-world为例"><a href="#开始开发，以hello-world为例" class="headerlink" title="开始开发，以hello world为例"></a>开始开发，以hello world为例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制hello world项目到目标文件夹</span></span><br><span class="line">cp -r ~/esp/esp-idf/examples/get-started/hello_world/ ~/</span><br><span class="line">cd ~/hello_world</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目标芯片</span></span><br><span class="line">idf.py set-target esp32S3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">idf.py build</span><br></pre></td></tr></table></figure>


<h2 id="配置USB设备绑定"><a href="#配置USB设备绑定" class="headerlink" title="配置USB设备绑定"></a><strong>配置USB设备绑定</strong></h2><p>WSL无法直接获得插入主机的设备，需要安装开源工具usbpid-win</p>
<h3 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--interactive</span> <span class="literal">--exact</span> dorssel.usbipd<span class="literal">-win</span></span><br></pre></td></tr></table></figure>
<h3 id="WSL下安装"><a href="#WSL下安装" class="headerlink" title="WSL下安装"></a>WSL下安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-tools-virtual hwdata</span><br><span class="line">sudo update-alternatives --install /usr/local/bin/usbip usbip `ls /usr/lib/linux-tools/*/usbip | tail -n1` 20</span><br></pre></td></tr></table></figure>

<h3 id="windows下绑定USB设备到WSL"><a href="#windows下绑定USB设备到WSL" class="headerlink" title="windows下绑定USB设备到WSL"></a>windows下绑定USB设备到WSL</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看设备 未插入ESP32时</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd list</span><br><span class="line"></span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                                STATE</span><br><span class="line"><span class="number">1</span><span class="literal">-11</span>   <span class="number">1462</span>:<span class="number">7</span>d90  USB 输入设备                         Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-3</span>    <span class="number">8087</span>:<span class="number">0029</span>  英特尔(<span class="built_in">R</span>) 无线 Bluetooth(<span class="built_in">R</span>)          Not shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设备 插入ESP32</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd list</span><br><span class="line"></span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                          STATE</span><br><span class="line"><span class="number">1</span><span class="literal">-11</span>   <span class="number">1462</span>:<span class="number">7</span>d90  USB 输入设备                  Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-2</span>    <span class="number">1</span>a86:<span class="number">7523</span>  USB<span class="literal">-SERIAL</span> CH340 (COM3)      Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-3</span>    <span class="number">8087</span>:<span class="number">0029</span>  英特尔(<span class="built_in">R</span>) 无线 Bluetooth(<span class="built_in">R</span>)   Not shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享设备</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd bind <span class="literal">-b</span> <span class="number">2</span><span class="literal">-2</span></span><br><span class="line"><span class="comment"># 输入之后 CH340的状态会变更为shared，此时WSL中还是没有这个设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定设备</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd attach <span class="literal">--wsl</span> <span class="literal">--busid</span> <span class="number">2</span><span class="literal">-2</span></span><br><span class="line"><span class="comment"># CH340的状态会变更为attached，现在WSL中就有这个设备了，但windows中就不会有这个设备了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要想恢复设备在windows中的连接可以输入</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd detach <span class="literal">--busid</span> <span class="number">2</span><span class="literal">-2</span></span><br></pre></td></tr></table></figure>

<p>在WSL中查看这个设备，可以看到ttyUSB0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rfv56@DESKTOP-Perry:~$ ls /dev/ttyUSB*</span><br><span class="line">/dev/ttyUSB0</span><br></pre></td></tr></table></figure>

<h2 id="烧录程序到设备中"><a href="#烧录程序到设备中" class="headerlink" title="烧录程序到设备中"></a><strong>烧录程序到设备中</strong></h2><p>在WSL中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制hello world项目到目标文件夹</span></span><br><span class="line">cp -r ~/esp/esp-idf/examples/get-started/hello_world/ ~/</span><br><span class="line">cd ~/hello_world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目标芯片</span></span><br><span class="line">idf.py set-target esp32S3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">idf.py build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">烧录程序</span></span><br><span class="line">idf.py -p /dev/ttyUSB0 flash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开监视器</span></span><br><span class="line">idf.py -p /dev/ttyUSB0 monitor</span><br></pre></td></tr></table></figure>
<p>至此WSL下ESP32开发环境已经配好了，但经常需要输入命令行进行配置、烧录还是很麻烦，网络上有很多VSCODE下配置ESPIDF的教程，但本人比较喜欢Jetbarins家的产品，所以使用Clion进行开发</p>
<h2 id="Clion下连接WSL开发ESP32"><a href="#Clion下连接WSL开发ESP32" class="headerlink" title="Clion下连接WSL开发ESP32"></a><strong>Clion下连接WSL开发ESP32</strong></h2><p>打开Clion，菜单栏File-Remote Development-WSL-New Project-选择要用于ESP32开发的发行版-选择Project Direction比如：<code>/home/rfv56/hello_world </code>然后Download IDE and connect，等待JetBrainsClient在WSL中下载安装完，结束后就会弹出如下界面，点开terminal弹出的不是windows的cmd而是WSL的shell<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Pasted%20image%2020240621163336.png"><br>接下来要让clion自动读取ESP-IDF的cmake文件，点开setting-Build, Execution, Deployment-Toolchains，点击Add environment-from file选则ESP-IDF目录下的export.sh，<code>/home/rfv56/esp/esp-idf/export.sh</code>然后在setting-Build, Execution, Deployment-Cmake中填入<code>ESPBAUD=115200;IDF_TARGET=esp32</code>，【esp32】可以根据实际情况改成esp32c3或其他的，填入后Cmake会自动找到<code>/home/rfv56/esp/esp-idf/tools/cmake</code>下对应的cmake文件</p>
<p>设置完成后点击确认，如果没有报错就完成设置了，如果报错了如下图reset Cache and Reload Project即可，配置完成后esp-idf会出现在project下，头文件等也都能跳转，非常方便<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Pasted%20image%2020240621163414.png"><br>可以添加一些按钮在右上角，方便开发，点击Edit Configurations…<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20240621192937949.png"><br>比如设置一个按钮用来添加环境变量<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Pasted%20image%2020240621163238.png"><br>同理可以设置其他一些按钮，点击运行相应的命令会在terminal中被运行，从而省去了手敲的麻烦<br><img src="/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Pasted%20image%2020240621162939.png"></p>
<p>至此，基于WSL2的ESP-IDF开发ESP32环境就配置好了。</p>
]]></content>
      <tags>
        <tag>WSL2</tag>
        <tag>环境配置</tag>
        <tag>Clion</tag>
        <tag>ESP32</tag>
        <tag>ESP-IDF</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机系统-读书笔记1</title>
    <url>/2024/05/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h3 id="程序编译流程："><a href="#程序编译流程：" class="headerlink" title="程序编译流程："></a><strong>程序编译流程：</strong></h3><ol>
<li>预处理阶段，预处理器(cpp)根据带&#39;#&#39;的命令调整原始C程序，得到的程序以.i结尾</li>
<li>编译阶段，编译器(ccl)将.i文件翻译成汇编语言的.s文件</li>
<li>汇编阶段<span id="more"></span>，汇编器(as)将.s文件翻译成机器语言指令，将这些指令打包为一种叫可重定位目标程序，生成.o文件，.o文件是二进制文件</li>
<li>链接阶段，连接器(ld)将各个用到的.o文件合并在一起生成可执行目标文件，这个文件可以被加载到内存中运行</li>
</ol>
<h3 id="系统组成："><a href="#系统组成：" class="headerlink" title="系统组成："></a><strong>系统组成：</strong></h3><ol>
<li>总线：总线传输定长的字节块，称为字，1个字4字节则为32位，8字节则为64位</li>
<li>I&#x2F;O设备：鼠标键盘、显示器、硬盘等，I&#x2F;O设备通过控制器或适配器与总线连接</li>
<li>主存：DRAM，每个存储字节有其唯一的地址</li>
<li>处理器：解释（执行）主存中的指令的引擎，核心是一个大小为一个字的寄存器，称为程序计数器(PC)，任何时刻PC指向主存中的某条机器语言指令（即存有该条指令的地址）</li>
</ol>
<h3 id="操作系统有两个基本功能："><a href="#操作系统有两个基本功能：" class="headerlink" title="操作系统有两个基本功能："></a><strong>操作系统有两个基本功能：</strong></h3><ol>
<li>防止硬件被失控的应用程序滥用；</li>
<li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。<br>操作系统通过进程、虚拟内存、文件来实现这两个功能<br>文件是对I&#x2F;0 设备的抽象，虚拟内存是对程序存储器（主存和磁盘）的抽象，而进程是对一个正在运行的程序（处理器、主存和I&#x2F;O）的抽象。</li>
</ol>
<h3 id="杂"><a href="#杂" class="headerlink" title="杂"></a><strong>杂</strong></h3><p><strong>字数据大小，计算机的字长大小表示指针数据的标称大小</strong>，字长决定虚拟地址空间的大小， 对于字长为w的机器，虚拟地址范围为0~2^w - 1 ，程序最多方位2^w个字节。<br>32位字长的虚拟地址最大4GB，64位字长的虚拟地址最大16EB。<br>32位程序和64位程序区别在于如何编译而不是其运行的机器类型</p>
<p><strong>算数右移：</strong> 在左端补k个最高有效位的值<br><strong>逻辑右移：</strong> 在左端补k个0</p>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>编译</tag>
        <tag>系统组成</tag>
      </tags>
  </entry>
  <entry>
    <title>交叉编译mips架构OpenCV</title>
    <url>/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>本文参考<br><a href="https://blog.csdn.net/qq_45848817/article/details/135484220">AI嵌入式3——君正T40之MIPS32架构交叉编译opencv4篇，作者：RanceGru</a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><p>Ubuntu环境的虚拟机或主机</p>
<ol>
<li>按照芯片厂提供的SDK文档配置好交叉编译工具链，<span id="more"></span> </li>
<li>下载opencv源码，如果需要opencv_contrib则下载与opencv源码相同版本的opencv_contrib源码。</li>
<li>下载安装cmake-gui</li>
</ol>
<h2 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a><strong>编译配置</strong></h2><p>以下例子使用的是君正T40作为例子，采用mips架构</p>
<h3 id="构建目录"><a href="#构建目录" class="headerlink" title="构建目录"></a><strong>构建目录</strong></h3><p>将opencv和opencv_contrib的源码解压出来，并新建两个目录分别为build 和 install</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831163727394.png"></p>
<p>打开cmake-gui，将opencv源码位置和build文件夹位置填入cmake</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831164044048.png"></p>
<h3 id="指定CMAKE-TOOLCHAIN-FILE"><a href="#指定CMAKE-TOOLCHAIN-FILE" class="headerlink" title="指定CMAKE_TOOLCHAIN_FILE"></a><strong>指定CMAKE_TOOLCHAIN_FILE</strong></h3><p>点击Add Entry，Name填写CMAKE_TOOLCHAIN_FILE，选择FILEPATH，Value填写的是opencv源码下&#x2F;platforms&#x2F;linux&#x2F;mips32r5el-gnu.toolchain.cmake，如果你使用的是其他架构的芯片，选择对应的即可</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831164329443.png"></p>
<p>确认无误后点击Configure，选择Unix Makefiles，指定Specify options ofr cross-compiling，点击下一步</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831164738250.png"></p>
<p>在弹出的窗口分别填上所使用的操作系统，处理器架构，交叉编译器gcc和g++以及交叉编译器根目录，点击完成</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831164809913.png"></p>
<p>填写正确的情况下cmake-gui下方会弹出当前配置的选项以及cmake自动识别获得的一些信息，上方是配置项</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831165026543.png"></p>
<h3 id="修改编译选项"><a href="#修改编译选项" class="headerlink" title="修改编译选项"></a><strong>修改编译选项</strong></h3><ol>
<li>(可选)如果需要使用opencv_contrib，搜索OPENCV_EXTRA_MODULES_PATH，选中opencv_contrib源码目录下的<strong>modules文件夹</strong></li>
</ol>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831165347039.png"></p>
<ol start="2">
<li>找到CMAKE_C_FLAGS_XXX、CMAKE_CXX_FLAGS_XXX分别添加-fPIC编译选项，如果你所使用的嵌入式程序使用uclibc，则还需要加上-muclibc，默认情况下，release编译使用-O3的优化选项，如果你在编译完成后发现运行出现Illegal Instruction可以考虑将-O3改为-O2重新编译，其他选项保持默认即可</li>
</ol>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831165728278.png"><br>3. 给CMAKE_EXE_LINKER_FLAGSXXXX加上-lpthread -lrt -ldl选项</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831170050526.png"></p>
<ol start="4">
<li>(可选)将CMAKE_INSTALL_PREFIX修改为自己创建的install目录，如果不修改则会在build目录下自动创建一个install目录</li>
<li>根据需要勾选自己需要的模块，比如zlib、png、jpeg等</li>
<li>根据需要取消勾选一些模块，比如java、python、js等相关的生成器和test模块</li>
</ol>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831170435240.png"></p>
<ol start="7">
<li>(可选)如果不是特别在意编译后大小，可以勾选opencv_world，会将opencv的所有功能包含进opencv_world，这样只需要链接opencv_world这一个库即可，不需要考虑功能之间的依赖关系</li>
<li>(可选)取消勾选BUILD_SHARED_LIBS，则编译输出的结果是.a静态库，否则编译结果是.so动态库。</li>
<li>(可选)CPU_BASELINE，默认选择MSA，实际使用中发现尽管是mips架构，但芯片可能并不支持MSA，可以选择关掉，以免出现报错<br>选择完成后点击Configure，如果有很多红色选项可以在次点击Configure，直到红色选项消除。</li>
</ol>
<p>点击Generate，生成Makefile<br><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831171946118.png"></p>
<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><strong>开始编译</strong></h2><p>在终端中打开build目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j8  #8表示8个同时作业数，根据实际情况填即可</span><br></pre></td></tr></table></figure>
<p>编译过程耗时比较长，编译过程中可能出现报错<code>base.hpp:548:17: error: &#39;cbrt&#39; is not a member of &#39;std&#39; return std::cbrt(val)</code>修改提示报错的源码，将<code>std::cbrt</code>改为<code>cbrt</code>，同样出错的可能还有std::copysign等，同样将std::去掉即可，去掉之后重新make -j8继续编译</p>
<p><img src="/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/image-20240831172001419.png"></p>
<p>编译完成后sudo make install，输入密码，即可完成编译，编译输出的库在所配置的install目录中，可以程序调用。</p>
]]></content>
      <tags>
        <tag>编译</tag>
        <tag>Ubuntu</tag>
        <tag>mips32</tag>
        <tag>mips</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
</search>
