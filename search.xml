<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>交叉编译mips架构OpenCV</title>
    <url>/2024/08/31/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91mips%E6%9E%B6%E6%9E%84OpenCV%E7%94%A8%E4%BA%8E%E5%90%9B%E6%AD%A3T40%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>本文参考<br>
<a href="https://blog.csdn.net/qq_45848817/article/details/135484220">AI嵌入式3——君正T40之MIPS32架构交叉编译opencv4篇    作者：RanceGru</a></p>
</blockquote>
<h2 id="一、环境准备"><strong>一、环境准备</strong></h2>
<p>Ubuntu环境的虚拟机或主机</p>
<ol>
<li>按照芯片厂提供的SDK文档配置好交叉编译工具链，<span id="more"></span></li>
<li>下载opencv源码，如果需要opencv_contrib则下载与opencv源码相同版本的opencv_contrib源码。</li>
<li>下载安装cmake-gui</li>
</ol>
<h2 id="二、编译配置"><strong>二、编译配置</strong></h2>
<p>以下例子使用的是君正T40作为例子，采用mips架构</p>
<h3 id="三、构建目录"><strong>三、构建目录</strong></h3>
<p>将opencv和opencv_contrib的源码解压出来，并新建两个目录分别为build 和 install</p>
<p><img src="image-20240831163727394.png" alt=""></p>
<p>打开cmake-gui，将opencv源码位置和build文件夹位置填入cmake</p>
<p><img src="image-20240831164044048.png" alt=""></p>
<h3 id="指定CMAKE-TOOLCHAIN-FILE"><strong>指定CMAKE_TOOLCHAIN_FILE</strong></h3>
<p>点击Add Entry，Name填写CMAKE_TOOLCHAIN_FILE，选择FILEPATH，Value填写的是opencv源码下/platforms/linux/mips32r5el-gnu.toolchain.cmake，如果你使用的是其他架构的芯片，选择对应的即可</p>
<p><img src="image-20240831164329443.png" alt=""></p>
<p>确认无误后点击Configure，选择Unix Makefiles，指定Specify options ofr cross-compiling，点击下一步</p>
<p><img src="image-20240831164738250.png" alt=""></p>
<p>在弹出的窗口分别填上所使用的操作系统，处理器架构，交叉编译器gcc和g++以及交叉编译器根目录，点击完成</p>
<p><img src="image-20240831164809913.png" alt=""></p>
<p>填写正确的情况下cmake-gui下方会弹出当前配置的选项以及cmake自动识别获得的一些信息，上方是配置项</p>
<p><img src="image-20240831165026543.png" alt=""></p>
<h3 id="修改编译选项"><strong>修改编译选项</strong></h3>
<ol>
<li>(可选)如果需要使用opencv_contrib，搜索OPENCV_EXTRA_MODULES_PATH，选中opencv_contrib源码目录下的<strong>modules文件夹</strong></li>
</ol>
<p><img src="image-20240831165347039.png" alt=""></p>
<ol start="2">
<li>找到CMAKE_C_FLAGS_XXX、CMAKE_CXX_FLAGS_XXX分别添加-fPIC编译选项，如果你所使用的嵌入式程序使用uclibc，则还需要加上-muclibc，默认情况下，release编译使用-O3的优化选项，如果你在编译完成后发现运行出现Illegal Instruction可以考虑将-O3改为-O2重新编译，其他选项保持默认即可</li>
</ol>
<p><img src="image-20240831165728278.png" alt=""><br>
3. 给CMAKE_EXE_LINKER_FLAGSXXXX加上-lpthread -lrt -ldl选项</p>
<p><img src="image-20240831170050526.png" alt=""></p>
<ol start="4">
<li>(可选)将CMAKE_INSTALL_PREFIX修改为自己创建的install目录，如果不修改则会在build目录下自动创建一个install目录</li>
<li>根据需要勾选自己需要的模块，比如zlib、png、jpeg等</li>
<li>根据需要取消勾选一些模块，比如java、python、js等相关的生成器和test模块</li>
</ol>
<p><img src="image-20240831170435240.png" alt=""></p>
<ol start="7">
<li>(可选)如果不是特别在意编译后大小，可以勾选opencv_world，会将opencv的所有功能包含进opencv_world，这样只需要链接opencv_world这一个库即可，不需要考虑功能之间的依赖关系</li>
<li>(可选)取消勾选BUILD_SHARED_LIBS，则编译输出的结果是.a静态库，否则编译结果是.so动态库。</li>
<li>(可选)CPU_BASELINE，默认选择MSA，实际使用中发现尽管是mips架构，但芯片可能并不支持MSA，可以选择关掉，以免出现报错<br>
选择完成后点击Configure，如果有很多红色选项可以在次点击Configure，直到红色选项消除。</li>
</ol>
<p>点击Generate，生成Makefile<br>
<img src="image-20240831171946118.png" alt=""></p>
<h2 id="四、开始编译"><strong>四、开始编译</strong></h2>
<p>在终端中打开build目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j8  #8表示8个同时作业数，根据实际情况填即可</span><br></pre></td></tr></table></figure>
<p>编译过程耗时比较长，编译过程中可能出现报错<code>base.hpp:548:17: error: 'cbrt' is not a member of 'std' return std::cbrt(val)</code>修改提示报错的源码，将<code>std::cbrt</code>改为<code>cbrt</code>，同样出错的可能还有std::copysign等，同样将std::去掉即可，去掉之后重新make -j8继续编译</p>
<p><img src="image-20240831172001419.png" alt=""></p>
<p>编译完成后sudo make install，输入密码，即可完成编译，编译输出的库在所配置的install目录中，可以程序调用。</p>
]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>mips32</tag>
        <tag>mips</tag>
        <tag>编译</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>基于WSL2+Clion配置ESPIDF开发环境</title>
    <url>/2024/06/20/%E5%9F%BA%E4%BA%8EWSL2-Clion%E9%85%8D%E7%BD%AEESPIDF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>本文参考<br>
<a href="https://blog.csdn.net/Missrainbows/article/details/130847126">WSL2下配置ESP-IDF开发环境    作者：Missrainbows)</a><br>
<a href="https://blog.csdn.net/qq_38844263/article/details/123989779">[ESP32][环境配置] Clion配置ESP-IDF开发环境，支持编译下载和menucofig    作者：踏雪Vernon</a></p>
</blockquote>
<h2 id="安装WSL2-more-的新方法"><strong>安装WSL2<span id="more"></span>的新方法</strong></h2>
<p>使用管理员权限打开Powershell，这种方法默认安装的是WSL2，并使用Ubuntu发行版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure>
<h2 id="旧方法安装WSL2"><strong>旧方法安装WSL2</strong></h2>
<h3 id="启用WSL">启用WSL</h3>
<p>在控制面板-程序-启用或关闭Windows功能中打开【适用于Linux的Windows子系统】和【虚拟机平台】功能，然后重启电脑。<br>
<img src="Pasted%20image%2020240621163322.png" alt=""><br>
此时已经打开了WSL，需要更新内核到WSL2</p>
<h3 id="更新WSL到WSL2"><strong>更新WSL到WSL2</strong></h3>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">下载Linux内核更新包并安装</a>并运行</p>
<h3 id="将默认WSL2设置为默认版本">将默认WSL2设置为默认版本</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="在Microsoft-Store下载安装Linux发行版">在Microsoft Store下载安装Linux发行版</h3>
<p>比如Ubuntu 22.04 LTS</p>
<p>安装好之后运行发行版，设置账号密码就可以开始使用了，开始安装ESP-IDF前可以先换个源</p>
<h2 id="安装ESP-IDF"><strong>安装ESP-IDF</strong></h2>
<h3 id="安装依赖">安装依赖</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git wget flex bison gperf python3 python3-venv python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0</span><br></pre></td></tr></table></figure>
<h3 id="获取ESP-IDF">获取ESP-IDF</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/esp</span><br><span class="line">cd ~/esp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据需要修改ESP-IDF的版本</span></span><br><span class="line">git clone -b release/v5.0 --recursive https://github.com/espressif/esp-idf.git</span><br></pre></td></tr></table></figure>
<h3 id="设置芯片类型">设置芯片类型</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/esp/esp-idf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置esp32项目开发 根据需要选择比如 ./install.sh esp32s3</span></span><br><span class="line">./install.sh esp32</span><br></pre></td></tr></table></figure>
<h3 id="设置环境变量">设置环境变量</h3>
<p>每次开发前都需要设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">. $HOME/esp/esp-idf/export.sh</span><br></pre></td></tr></table></figure>
<h3 id="开始开发，以hello-world为例">开始开发，以hello world为例</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制hello world项目到目标文件夹</span></span><br><span class="line">cp -r ~/esp/esp-idf/examples/get-started/hello_world/ ~/</span><br><span class="line">cd ~/hello_world</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目标芯片</span></span><br><span class="line">idf.py set-target esp32S3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">idf.py build</span><br></pre></td></tr></table></figure>
<h2 id="配置USB设备绑定"><strong>配置USB设备绑定</strong></h2>
<p>WSL无法直接获得插入主机的设备，需要安装开源工具usbpid-win</p>
<h3 id="windows下安装">windows下安装</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--interactive</span> <span class="literal">--exact</span> dorssel.usbipd<span class="literal">-win</span></span><br></pre></td></tr></table></figure>
<h3 id="WSL下安装">WSL下安装</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-tools-virtual hwdata</span><br><span class="line">sudo update-alternatives --install /usr/local/bin/usbip usbip `ls /usr/lib/linux-tools/*/usbip | tail -n1` 20</span><br></pre></td></tr></table></figure>
<h3 id="windows下绑定USB设备到WSL">windows下绑定USB设备到WSL</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看设备 未插入ESP32时</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd list</span><br><span class="line"></span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                                STATE</span><br><span class="line"><span class="number">1</span><span class="literal">-11</span>   <span class="number">1462</span>:<span class="number">7</span>d90  USB 输入设备                         Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-3</span>    <span class="number">8087</span>:<span class="number">0029</span>  英特尔(<span class="built_in">R</span>) 无线 Bluetooth(<span class="built_in">R</span>)          Not shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设备 插入ESP32</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd list</span><br><span class="line"></span><br><span class="line">Connected:</span><br><span class="line">BUSID  VID:PID    DEVICE                          STATE</span><br><span class="line"><span class="number">1</span><span class="literal">-11</span>   <span class="number">1462</span>:<span class="number">7</span>d90  USB 输入设备                  Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-2</span>    <span class="number">1</span>a86:<span class="number">7523</span>  USB<span class="literal">-SERIAL</span> CH340 (COM3)      Not shared</span><br><span class="line"><span class="number">2</span><span class="literal">-3</span>    <span class="number">8087</span>:<span class="number">0029</span>  英特尔(<span class="built_in">R</span>) 无线 Bluetooth(<span class="built_in">R</span>)   Not shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享设备</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd bind <span class="literal">-b</span> <span class="number">2</span><span class="literal">-2</span></span><br><span class="line"><span class="comment"># 输入之后 CH340的状态会变更为shared，此时WSL中还是没有这个设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定设备</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd attach <span class="literal">--wsl</span> <span class="literal">--busid</span> <span class="number">2</span><span class="literal">-2</span></span><br><span class="line"><span class="comment"># CH340的状态会变更为attached，现在WSL中就有这个设备了，但windows中就不会有这个设备了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要想恢复设备在windows中的连接可以输入</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\rfv56&gt; usbipd detach <span class="literal">--busid</span> <span class="number">2</span><span class="literal">-2</span></span><br></pre></td></tr></table></figure>
<p>在WSL中查看这个设备，可以看到ttyUSB0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rfv56@DESKTOP-Perry:~$ ls /dev/ttyUSB*</span><br><span class="line">/dev/ttyUSB0</span><br></pre></td></tr></table></figure>
<h2 id="烧录程序到设备中"><strong>烧录程序到设备中</strong></h2>
<p>在WSL中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制hello world项目到目标文件夹</span></span><br><span class="line">cp -r ~/esp/esp-idf/examples/get-started/hello_world/ ~/</span><br><span class="line">cd ~/hello_world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置目标芯片</span></span><br><span class="line">idf.py set-target esp32S3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">idf.py build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">烧录程序</span></span><br><span class="line">idf.py -p /dev/ttyUSB0 flash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开监视器</span></span><br><span class="line">idf.py -p /dev/ttyUSB0 monitor</span><br></pre></td></tr></table></figure>
<p>至此WSL下ESP32开发环境已经配好了，但经常需要输入命令行进行配置、烧录还是很麻烦，网络上有很多VSCODE下配置ESPIDF的教程，但本人比较喜欢Jetbarins家的产品，所以使用Clion进行开发</p>
<h2 id="Clion下连接WSL开发ESP32"><strong>Clion下连接WSL开发ESP32</strong></h2>
<p>打开Clion，菜单栏File-Remote Development-WSL-New Project-选择要用于ESP32开发的发行版-选择Project Direction比如：<code>/home/rfv56/hello_world </code>然后Download IDE and connect，等待JetBrainsClient在WSL中下载安装完，结束后就会弹出如下界面，点开terminal弹出的不是windows的cmd而是WSL的shell<br>
<img src="Pasted%20image%2020240621163336.png" alt=""><br>
接下来要让clion自动读取ESP-IDF的cmake文件，点开setting-Build, Execution, Deployment-Toolchains，点击Add environment-from <a href="http://xn--fileESP-IDFexport-oy50aj77cho6db00ft5bhy1w.sh">file选则ESP-IDF目录下的export.sh</a>，<code>/home/rfv56/esp/esp-idf/export.sh</code>然后在setting-Build, Execution, Deployment-Cmake中填入<code>ESPBAUD=115200;IDF_TARGET=esp32</code>，【esp32】可以根据实际情况改成esp32c3或其他的，填入后Cmake会自动找到<code>/home/rfv56/esp/esp-idf/tools/cmake</code>下对应的cmake文件</p>
<p>设置完成后点击确认，如果没有报错就完成设置了，如果报错了如下图reset Cache and Reload Project即可，配置完成后esp-idf会出现在project下，头文件等也都能跳转，非常方便<br>
<img src="image-20241007153152879.png" alt=""><br>
可以添加一些按钮在右上角，方便开发，点击Edit Configurations…<br>
<img src="image-20240621192937949.png" alt=""><br>
比如设置一个按钮用来添加环境变量<br>
<img src="Pasted%20image%2020240621163238.png" alt=""><br>
同理可以设置其他一些按钮，点击运行相应的命令会在terminal中被运行，从而省去了手敲的麻烦<br>
<img src="Pasted%20image%2020240621162939.png" alt=""></p>
<p>至此，基于WSL2的ESP-IDF开发ESP32环境就配置好了。</p>
]]></content>
      <tags>
        <tag>WSL2</tag>
        <tag>环境配置</tag>
        <tag>Clion</tag>
        <tag>ESP32</tag>
        <tag>ESP-IDF</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo和Github Pages构建个人博客</title>
    <url>/2024/10/11/%E5%88%A9%E7%94%A8Hexo%E5%92%8CGithub%20Pages%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>本文参考<br>
<a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程    作者：淡淡的说非</a></p>
</blockquote>
<p>Github Pages本身提供静态网页托管服务，做一个简单的博客已经足够了，下面是配置Github Pages博客的操作介绍<span id="more"></span></p>
<h2 id="一、准备工作"><strong>一、准备工作</strong></h2>
<p>1.注册Github账号<br>
2.在本地安装git软件<br>
3.在本地安装NodeJS</p>
<h2 id="二、创建Github仓库"><strong>二、创建Github仓库</strong></h2>
<p>在Github中新建repository，仓库名称必须为<code>&lt;用户名&gt;.github.io</code>，并且是公开仓库</p>
<h2 id="三、在本地安装Hexo"><strong>三、在本地安装Hexo</strong></h2>
<p>在你打算写博客的目录右键，<code>open Git Bash here</code><br>
在git bash中输入命令安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，创建一个项目 <code>hexo-blog</code> 并初始化，这个名字可以改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init hexo-blog</span><br><span class="line">cd hexo-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>然后可以使用hexo的命令生成并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g  # 等同于hexo generate，用于生成静态网页文件</span><br><span class="line">hexo s  # 等同于hexo server，用于在本地运行hexo服务端</span><br></pre></td></tr></table></figure>
<p><img src="image-20241011235624549.png" alt=""></p>
<p>可以按住ctrl鼠标点击网址跳转到浏览器打开，或者手动打开<code>http://localhost:4000</code>即可看到hexo 服务端的默认欢迎页面</p>
<h2 id="四、配置主题"><strong>四、配置主题</strong></h2>
<h3 id="启用主题"><strong>启用主题</strong></h3>
<p>hexo可以使用默认主题，也可以按照自己的喜好选择主题，可以在<a href="https://hexo.io/themes/">官网主题页面</a>选择，也可以在Github中搜索[Hexo theme]下载使用开源主题，以我当前使用的<a href="https://github.com/blleng/hexo-theme-lx/tree/master">lx主题</a>为例<br>
在Github中下载源码，解压后直接放入<code>hexo-blog/themes</code>目录下，并更名为lx<br>
<img src="image-20241012112005085.png" alt=""></p>
<p>修改hexo-blog目录下的<code>_config.yml</code>，将<code>theme</code>条目修改为<code>theme: lx</code>，同时也可以更改页面的title、author等，如果需要中文将language改成 <code>language: zh-hans</code></p>
<p>使用hexo的命令生成并启动，看是否配置正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g  # 等同于hexo generate，用于生成静态网页文件</span><br><span class="line">hexo s  # 等同于hexo server，用于在本地运行hexo服务端</span><br></pre></td></tr></table></figure>
<h3 id="修改主题特性"><strong>修改主题特性</strong></h3>
<p>上面修改的是项目根目录下的_config.yml，针对项目属性进行配置。要对主题本身提供的特性进行修改需要修改<code>thems/lx/</code>目录下的_config.yml，比如avatar(头像)、social(社交媒体链接)等<br>
社交媒体链接可以按以下形式填写，icon使用的是<a href="https://fontawesome.com/icons">fontawesome</a>只需要按照fontawesome的名字填写在icon栏就会自动加载对应的icon<br>
GitHub:<br>
icon: github<br>
link: <a href="https://github.com/RFV56">https://github.com/RFV56</a><br>
Email:<br>
icon: envelope<br>
link: <a href="mailto:rfv56x@163.com">mailto:rfv56x@163.com</a><br>
JLC:<br>
icon: microchip<br>
link: <a href="https://oshwhub.com/rfv56">https://oshwhub.com/rfv56</a></p>
<p>还可以开启百度统计、latex、评论、搜索等功能，部分功能需要使用第三方平台，相关细节在主题的开源页面上及_config.yml注释中会提及。</p>
<h2 id="五、新建文章"><strong>五、新建文章</strong></h2>
<p>为了每一篇文章单独新建一个文件夹用于存放文章中的图片，需要在_config.yml中配置<code>post_asset_folder: true</code></p>
<p>在git bash中输入以下命令创建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new post 文章标题</span><br></pre></td></tr></table></figure>
<p>新建的文章会以markdown格式创建在&lt;项目根目录&gt;/source/_posts中，可以使用VScode、Obsidian等编辑文章</p>
<h2 id="六、部署项目到Github"><strong>六、部署项目到Github</strong></h2>
<p>到目前位置所有配置项都是在本地完成修改的，要把项目部署到Github提供公共访问需要手动push <code>public</code>到Github仓库，或者使用<code>hexo-deployer-git</code></p>
<p>下面安装<code>hexo-deployer-git</code>，<br>
在项目根目录打开git bash，输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改根目录下的_config.yml，配置 GitHub 相关信息<br>
deploy:<br>
type: git<br>
repo: <a href="https://github.com/RFV56/RFV56.github.io.git">https://github.com/RFV56/RFV56.github.io.git</a><br>
branch: main<br>
token: &lt;token要自己获取&gt;<br>
其中repo仓库地址填写自己创建的github.io仓库地址，token在github设置中获取，<code>Settings-Developer Settings-Personal access tokens-Tokens(classic)</code>新建一个并填入_config.yml中，这个token不要暴露给任何人</p>
<p>配置完成后，就可以部署项目了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g  # 等同于hexo generate，用于生成静态网页文件</span><br><span class="line">hexo s  # 等同于hexo server，用于在本地运行hexo服务端</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上运行确认无误后</span></span><br><span class="line">hexo d  # 等同于hexo deploy，用于将本地静态文件部署到github仓库</span><br></pre></td></tr></table></figure>
<p>至此hexo+Github Pages个人博客就配置完成了，输入自己的博客地址<a href="https://rfv56.github.io/">https://rfv56.github.io/</a>就能实现外部访问</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
